training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
cleanTrain <- training[,-(1:3)]
modelFitrpart <- train(training$Class ~ ., method='rpart', data=cleanTrain)
print(modelFitrpart$finalModel)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
View(training)
cleanTrain <- training[,-(1:3)]
modelFitrpart <- train(training$Class ~ ., method='rpart', data=cleanTrain)
print(modelFitrpart$finalModel)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
cleanTrain <- training[,-(1:3)]
# cleanTrain <- cleanTrain[, !(names(cleanTrain) %in% c("MemberAvgAvgIntenStatusCh2","MemberAvgTotalIntenStatusCh2"))]
# pcaProcess <- preProcess(cleanTrain, method = "pca", pcaComp = 3)
# pcaTrain <- predict(pcaProcess, cleanTrain)
#
# modelFitrpart <- train(training$Class ~ ., method='rpart', data=pcaTrain)
modelFitrpart <- train(training$Class ~ ., method='rpart', data=cleanTrain)
print(modelFitrpart$finalModel)
head(olive)
?tree
modelFittree <- train(olive$Area ~ .,method = "tree", list=FALSE)
modelFittree <- train(oliveOrig$Area ~ .,method = "tree", data = olive)
oliveOrig = olive
library(pgmm)
data(olive)
oliveOrig = olive
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modelFittree <- train(oliveOrig$Area ~ .,method = "tree", data = olive)
library("tree", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?plot
?plot.tree
?tree
modelFittree <- tree(oliveOrig$Area ~ ., data = olive)
newArea <- predict(modelFittree, newdata)
newArea
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFitglm <- train(trainSA$chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial")
modelFitglm <- train(trainSA$chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict <- predict(modelFitglm, testSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFitglm <- train(trainSA$chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict <- predict(modelFitglm, testSA)
missClass(trainSA$chd, testpredict)
testpredict
trainpredict <- predict(modelFitglm, trainSA)
testpredict <- predict(modelFitglm, testSA)
missClass(trainSA$chd,trainpredict)
missClass(testSA$chd, testpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
?varlmp
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
modelFitrf <- train(vowel.train$y ~ ., method = "rf" ,data = vowel.train[,-1])
ModelFitrf
modelFitrf
?varImp
varImp(modelFitrf)
library(elasticnet)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFitlasso <- train(CompressiveStrength ~ ., method = "lasso", data = training)
pred31 <- predict(modFitlasso, testing)
library(caret)
library(randomForest)
library(gbm)
library(elasticnet)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFitlasso <- train(CompressiveStrength ~ ., method = "lasso", data = training)
pred31 <- predict(modFitlasso, testing)
modFitlasso
?plot.enet
plot.enet(modFitlasso)
?enet
class(modFitlasso)
plot.enet(modFitlasso, testing)
plot.enet(modFitlasso$finalModel)
?plot.enet
modFitlasso$finalModel
View(training)
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
if(!file.exists("gaData.csv")){
download.file(fileUrl3,destfile="gaData.csv",method="curl")
}
dateDownloaded <- date()
dat = read.csv("gaData.csv")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
if(!file.exists("gaData.csv")){
download.file(fileUrl3,destfile="gaData.csv",method="curl")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
if(!file.exists("gaData.csv")){
download.file(fileUrl,destfile="gaData.csv",method="curl")
}
dat = read.csv("gaData.csv")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forest")
install.packages("forest")
install.packages("forecast")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?bat
?bats
head(training)
head(dat)
tail(dat)
modFitbats <- bats(training$visitsTumblr)
predbats <- predict(modFitbats, testing$date)
head(tstrain)
modFitbats <- bats(tstrain)
predbats <- predict(modFitbats, testing$date)
modFitbats$finalModel
modFitbats <- bats(tstrain)
modFitbats$finalModel
modFitbats
?bats
fcast <- forecast(modFitbats)
accuracy(testing, fcast)
accuracy(testing$visitsTumblr, fcast)
fcast
testing
fcast
head(testing)
modFitbats <- bats(tstrain)
fcast <- forecast(modFitbats)
fcast
fcast <- forecast(modFitbats, testing$visitsTumblr)
fcast <- forecast(modFitbats, h=length(testing$visitsTumblr))
fcast
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
modfitsvm <- train(CompressiveStrength ~ ., method = "svm", data = training)
?e1071
modfitsvm <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(modFitsvm,testing)
svmPred <- predict(modfitsvm,testing)
accuracy(svmPred, testing$CompressiveStrength)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfFit <- train( training$diagnosis ~ ., method="rf", data=training)
btFit <- train( training$diagnosis ~ ., method="gbm", data=training)
ldaFit <- train( training$diagnosis ~ ., method="lda", data=training)
rfPred <- predict(rfFit,testing)
btPred <- predict(btFit,testing)
ldaPred <- predict(ldaFit,testing)
library(ggplot2)
qplot(rfPred,btPred,coulour=diagnosis, data=testing)
predDF <- data.frame(rfPred,btPred,ldaPred,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~., method="rf",data=predDF)
comPred <- predict(combModFit,predDF)
sqrt(sum( (as.numeric(rfPred)-as.numeric(testing$diagnosis))^2))
sqrt(sum( (as.numeric(btPred)-as.numeric(testing$diagnosis))^2))
sqrt(sum( (as.numeric(ldaPred)-as.numeric(testing$diagnosis))^2))
sqrt(sum( (as.numeric(comPred)-as.numeric(testing$diagnosis))^2))
confusionMatrix(testing$diagnosis,rfPred)
confusionMatrix(testing$diagnosis,btPred)
confusionMatrix(testing$diagnosis,ldaPred)
confusionMatrix(testing$diagnosis,comPred)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfFit <- train( training$diagnosis ~ ., method="rf", data=training)
btFit <- train( training$diagnosis ~ ., method="gbm", data=training)
ldaFit <- train( training$diagnosis ~ ., method="lda", data=training[,1:129])
rfPred <- predict(rfFit,testing)
btPred <- predict(btFit,testing, verbose = FALSE)
ldaPred <- predict(ldaFit,testing)
predDF <- data.frame(rfPred,btPred,ldaPred,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~., method="rf",data=predDF)
comPred <- predict(combModFit,predDF)
confusionMatrix(testing$diagnosis,rfPred)
confusionMatrix(testing$diagnosis,btPred)
confusionMatrix(testing$diagnosis,ldaPred)
confusionMatrix(testing$diagnosis,comPred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoFit <- train( training$CompressiveStrength ~ ., method="lasso", data=training)
lassoPred <- predict(lassoFit,testing)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
#Q4
library(lubridate)
library(forecast)
dat = read.csv("./gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
testing = dat[year(dat$date)>2011,]
test = dat[year(dat$date) > 2011,]
pred <- forecast(fit, h=length(test$visitsTumblr),level=c(80,95))
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast,test$visitsTumblr)
modBats <- bats(tstrain)
pred <- forecast(modBats, h=length(testing$visitsTumblr),level=c(80,95))
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy <- 1-sum(test$visitsTumblr>pred$upper[,2])/length(test$visitsTumblr)
accuracy
install.packages(c("gtools", "manipulate"))
install.packages("doParallel")
install.packages("ParallelForest")
install.packages(c("manipulate", "Matrix"))
install.packages("quantmod")
install.packages("shiny")
install.packages(c("CORElearn", "manipulate", "Matrix"))
devtools::install_github('rstudio/shinyapps')
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
shinyapps::setAccountInfo(name='vinasr', token='828CDC4DA153CDE6FC1BAABC469916CB', secret='6nmwinapbKy53JiOX2flvXrmNulP7V15jLQVF8ij')
library("rCharts", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp(display.mode = 'showcase')
library(quantmod)
?getSymbols
getSymbols("GOOG",src="yahoo")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
getSymbols(c("YHOO","GOOG","FRED","Oanda"))
getSymbols("YHOO")
getSymbols("Oanda")
getSymbols("oanda")
setSymbolLookup(SPY='yahoo', VXN=list(name='^VIX',src='yahoo'))
mm <- specifyModel(Next(OpCl(SPY)) ~ OpCl(SPY) + Cl(VIX))
modelData(mm)
mm
modelData(mm)
?specifyModel
install.packages(c("CORElearn", "manipulate", "party", "RcppArmadillo", "strucchange"))
?getSymbolLookup
getSymbols
getSymbols()
?getSymbols
showSymbols
showSymbols()
loadSymbols()
?shinyUI
?getSymbols\
?getSymbols
runApp()
runApp()
runApp()
install.packages(c("plyr", "rmarkdown", "scales", "shiny", "survival"))
install.packages(c("plyr", "rmarkdown", "scales", "shiny", "survival"))
install.packages(c("plyr", "rmarkdown", "scales", "shiny", "survival"))
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runApp()
runApp()
runApp()
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?unApp()
?unApp
?eunApp
?runApp
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
getSymbols("GS", src = "google")
Op(GS)
Hi(GS)
shiny::runApp()
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
install_github('slidify','ramanathv')
library(devtools)
install_github('slidify','ramanathv')
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
install_github('slidifyLibraries','ramnathv')
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
getSymbols("GOOG", src = "google")
out_Op <- Op("GOOG")
out_Op <- Hi("GOOG")
out_Op <- Hi(GOOG)
sym <- "GOOG"
out_Op <- Hi(sym)
sym <- GOOG
sym <- getSymbols("GOOG", src = "google")
out_Op <- Hi(sym)
library(quantmod)
?getSymbolLookup
sym <- getSymbols('GOOG', src = "google")
out_Op <- Hi(sym)
?Op
out_Op <- Hi(getSymbols('GOOG'))
class(sym)
class(GOOG)
sym <- getSymbols('GOOG', src = "google")
class(sym)
?getSymbolLookup
?getSymbolLookup('GOOG')
sym <- getSymbolLookup('GOOG')
sym <- setSymbolLookup('GOOG')
sym
sym <- setSymbols('GOOG')
sym <- setSymbol('GOOG')
?getSymbolLookup
setSymbolLookup(QQQQ='yahoo',DIA='MySQL')
getSymbolLookup('QQQQ')
class(GOOG)
Op(GOOG)
sym <- setSymbol('GOOG', auto.assign = FALSE)
sym <- getSymbol('GOOG', auto.assign = FALSE)
sym <- getSymbols('GOOG', auto.assign = FALSE)
shiny::runApp(display.mode = "showcase")
tail(Op(GOOG),1)
class(tail(Op(GOOG),1))
?xts
attr(tail(Op(GOOG),1), descr)
attr(tail(Op(GOOG),1), 'descr'')
)
attr(tail(Op(GOOG),1), 'descr)
attr(tail(Op(GOOG),1), 'descr')
?attr
?attr.xts
last(Op(GOOG))
coredata(last(Op(GOOG)))
index(last(Op(GOOG)))
coredata(last(Op(GOOG)))[1]
last(sym)
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
coredata(last(Op(sym)))[1]
class(coredata(last(Op(sym)))[1])
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
install.packages(c("clue", "cluster", "curl", "manipulate", "MASS"))
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
?reactive
?reactive
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
sym <- getSymbols("GOOG", src = "google", auto.assign = FALSE)
out_date <- renderText({index(last(sym()))})
out_date <- index(last(sym()))
out_date <- index(last(sym)
)
sym <- reactive({
getSymbols(input$in_symbol, src = input$in_source, auto.assign = FALSE)
})
index(last(sym()))
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
library(ggplot2)
?ggplot
?xts
shiny::runApp(display.mode = "showcase")
sym_xts <- getSymbols("GOOG", src = "google", auto.assign = FALSE)
str(sym_xts)
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
Cl(sym)
syn
tail(sym)
head(sym)
Cl(sym_xts)
class(Cl(sym_xys))
class(Cl(sym_xts))
str(Cl(sym_xys))
str(Cl(sym_xts))
?ggplot
shiny::runApp(display.mode = "showcase")
shiny::runApp()
library(slidify)
author(quantmod_app)
author("quantmod_app")
---
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install_version("stringr", version="0.6.2", type = "source")
library(devtools)
install_version("stringr", version="0.6.2", type = "source")
install_version("stringr", version="0.6.2", type = "source")
install_version("stringr", version="0.6.2", type = "source")
install_version("stringr", version="0.6.2", type = "source")
slidify("index.Rmd")
install_github('ramnathv/slidify', ref = github_pull(425))
